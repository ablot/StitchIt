;; For more information on setting up the INI file see the StitchIt wiki at: https://github.com/BaselLaserMouse/StitchIt/wiki
;; To read the INI file into MATLAB as a structure run: userConfig=readStitchItINI



;;----------------------------------------------------------------------------
;; sub-directories
;; When StitchIt runs it looks for certain data in particular places and creates
;; certain directories as it runs. The names of these directories are defined
;; here. There should be no reason to ever change these values. It is not 
;; recommended that you change the settings in subdir.
;; Note that in all cases, to avoid creating a sub-directory simply set the directory
;; name to "."

[subdir]
;; The raw data (which can be compressed once sections are build)
rawDataDir=rawData

;; Pre-processing (tile stats, section average files, etc) data are kept in 
;; rawDataDir/preProcessDir
preProcessDir=stitchitPreProcessingFiles

;; The average images (this is a sub-directory within rawDataDir)
averageDir=averageDir

;; The stitched images. full size images in stitchedDirBaseName_100, 50% size in stitchedDirBaseName_050
stitchedDirBaseName=stitchedImages

;; Data that will be sent to the web (see syncAndCrunch) go here
WEBdir=forWWW


;;----------------------------------------------------------------------------
;; Our TissueVision system does not correctly report the number of microns per 
;; pixel in the Mosaic file. We therefore measured this and the following few
;; sections are responsible for correctly telling StitchIt what this value is.
;; We define the number of microns per pixel with respect to a particular image
;; size. It might have been better to define it using scan angle, but right now
;; we do it with respect to an image size of 1664 x 1664. 
;; Note that [experiment], [micsPerPixel], and the objective sections are only
;; for the TissueVision. We assume that other systems will correctly report the
;; number of microns per pixel in the image meta-data. 

;;----------------------------------------------------------------------------
[experiment]
;; Set this to be the objective used in your experiment. This value is 
;; used to determine where to place the tiles. Its name must correspond to one of the
;; the objective name sections below. The _x_x that suffixes some names refers to the 
;; scan angle. e.g. _2_2 is a scan angle of 2.2
objectiveName=Nikon16x_2_2
;;objectiveName=Nikon16x_3_0
;;objectiveName=Zeiss20x



;;----------------------------------------------------------------------------
;;This section determines how StitchIt will calculate the number of microns
;;per pixel. This is important because StitchIt uses this number to position
;;the tiles. It needs to know the number of microns per pixel both for 
;;naive positioning and stage coordinate positioning.  
;;


[micsPerPixel]
;;We calculate the number of microns per pixel by imaging an EM grid. The number of 
;;microns per pixel must be in reference to a particular image size. This is defined
;;here. e.g. 1664 by 1664 pixels
numPix=1664

;;The following setting allows us to choose whether we want to use a single number
;;for both X and Y or different numbers. Using a single number (usemeasured=1)
;;causes us to use "micsPerPixel" and setting usemeasured to 0 casuses us to use
;;the two separate row and col values. The need to tweak the number may arise from 
;;the sampling accuracy of the measurements which creates rounding errors in the FFT. 
;;1 means use the measured, single, value for both x and y. 0 means use the other
;;two values (micsPerPixelRows and micsPerPixelCols.
usemeasured=0


;; Objectives follow - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[Zeiss20x]
;;In case the user tweaks this value, we log here in the comments that the
;;default value for the 20x at 1664^2 is 0.485 microns/pixel 
micsPerPixelMeasured=0.485

;;The following two numbers are based on the above but tweaked. The 
;;tweaking was done by trying out a bunch of different conversion factors
;;and seeing what worked best. They allow for setting different numbers
;;of microns per pixel in x and y. This may not be necessary and may be
;;removed in future. 
micsPerPixelRows=0.468
micsPerPixelCols=0.450


[Nikon16x_2_2]
micsPerPixelMeasured=0.480
micsPerPixelRows=0.474
micsPerPixelCols=0.459

[Nikon16x_3_0]
micsPerPixelMeasured=0.650
micsPerPixelRows=0.650
micsPerPixelCols=0.650



;;----------------------------------------------------------------------------
[tile]
;; These settings influence how tiles are loaded by the tileLoad command. 

;;Whether to crop tiles as they're loaded 
;;(StitchIt does not alter the raw data and does not replace tiles with cropped versions)
docrop=1

;;What proportion of the tile to crop. This much is cropped from each edge.
cropProportion=0.0216

;;Correct tile illumination on loading before stitching 
doIlluminationCorrection=1

;;The type of illumination correction to perform. "split" - odd and even rows
;;processed separately. "pool" - pool averages from odd and even rows
illumCorType=split

;;Use saved coefficients to correct comb artifact
doPhaseCorrection=0

;;If a tileStats file is present and it contains an offset value, this is subtracted
;;from tiles prior to loading. This is relevent for systems that save images as
;;signed ints. Has no effect on TissueCyte data, which are signed.
doOffsetSubtraction=1

;;This is the second argument passed to rot90 after tiles are loaded. 
;;If your tiles are oddly rotated and stitching looks like it failed. Try
;;changing this value. Valid values are: -2, -1, 0, 1, and 2
;;0 means no rotation
tileRotate=0


;;----------------------------------------------------------------------------
;; analyse tiles uses these values
[analyse]

;;lowValueThreshold - tiles with means smaller than this number don't contribute
;;to illumination correction. 
;; TODO: NO LONGER USING THIS. THIS SETTING IS UNDER FLUX. SEE preProcessTiles and writeAverageFiles
lowValueThreshold=5

;;comb correction bands - into how many strips to divide the image for comb correction
;;see calcPhaseDelayShifts
nbands=9


;;----------------------------------------------------------------------------
;;stitchSection looks at the following to decide what to do
[stitching]

;;Stitch based on stage coordinates. This may well make things worse.
doStageCoords=0

;;fusion weight is how much blending we do at tile borders. currently 0 is no blending and 1 blending. 
fusionWeight=0

;;flip completed section up/down 
flipud=1

;;flip completed section left/right
fliplr=0

;;rotate the section if needed (this is the second input argument to a rot90, so 0 means no rotation)
rotate=0

;;----------------------------------------------------------------------------
;;syncAndCrunch settings
[syncAndCrunch]

;; Default directory on the local machine on which data land when syncAndCrunch is run. 
;; Set to zero if you do not wish to define this (it is recommended you do, however).
;; e.g. landingDirectory might be /mnt/data/anatomyStacks and all data directories will
;; go under that when syncAndCrunch pulls them in.
landingDirectory=0

;; Mount point of the Windows acquisition machine on the Linux analysis machine. This will
;; likely be a RAID volume to which the acquisition software saves data. syncAndCrunch
;; will copy data from this location to the landingDirectory. By supplying the path to the
;; the acquisition mount point you will be able to run syncAndCrunch without any input
;; arguments once you have started an acquisition. It will then automatically find the
;; latest acquisition and process it. 
acqMountPoint=0

;;Boolean to determine whether or not to build images to the web
sendToWeb=0

;;The webserver to host the images. You will need passwordless access to the server.
server=

;; The full path to the MATLAB executable. i.e. not the path to a script you are using
;; to start MATLAB on a day to day basis. This is needed in order to start a background
;; process for sending images to the web. 
;; e.g.  MATLABpath=/usr/local/MATLAB/R2017b/bin/matlab
;; You don't need to worry about whether StitchIt will be in the path, this will be taken 
;; care of by syncAndCrunch 
MATLABpath=

;; The rsync command is used to pull data from the buffer server to the local machine for pre-processing.
;; Here you can set the flag with which rsync runs during copying. Read the rsync documentation if you 
;; want to know what these do.
;; reasonable options include -a, -au, -r, -ru
rsyncFlag=-a

;;Provide the option for sending slack notifications, e-mails, whatever, during acquisition
;;if 0 we only report to the MATLAB screen. if 1 we send via notficationProtocol 
notifications=0

;;For Slack you will need to install https://github.com/DylanMuir/SlackMatlab in your path
notificationProtocol=slack

;; The user string associated with a Slack message. This can be anything, it doesn't have have to 
;; be a valid username in your Slack group. If slackUser is 0 (zero) no user string is transmitted. 
slackUser=@StitchIt

;; The following is the Slack hook url to which to send the data. if 0 no message is sent.
;; You will need to generate the Slack hook yourself so your messages are sent to the right
;; channel. Instructions are here: https://github.com/DylanMuir/SlackMatlab
slackHook=0

;; This is the function run post-acquisition. It must be in the MATLAB path, but not in the StitchIt install path
;; or you will run into issues when pulling changes. It should tand take no input arguments. e.g. if your
;; post-acquisition file is called "myPostAcq.m" then you coud place it in "~/MATLAB" and here you will edit the
;; line to say "postAcq=myPostAcq";; 
;; If postAcqFun=0 we run the default (postAcqFun). Do not edit this file unless you know what you're doing.
postAcqFun=0

;; The cut-off intensity value for the web preview. if <=1 then it's treated as a 
;; proportion of the full 16 bit scale. if >1 as a hard threshold. 
rescaleThresh=2820
